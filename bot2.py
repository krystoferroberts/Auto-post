import asyncio
import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram.client.session.aiohttp import AiohttpSession
from config import TOKEN, CHANNEL_ID, ADMIN_IDS

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
session = AiohttpSession()
bot = Bot(token=TOKEN, parse_mode=None, session=session)

# –°–æ–∑–¥–∞–µ–º Dispatcher (–ë–ï–ó –ê–†–ì–£–ú–ï–ù–¢–ê bot)
dp = Dispatcher()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
POSTS_DIR = "posts"
os.makedirs(POSTS_DIR, exist_ok=True)

# –§–∞–π–ª –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BANNED_USERS_FILE = "banned_users.json"
if not os.path.exists(BANNED_USERS_FILE):
    with open(BANNED_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
chat_message_ids = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∞–º–∏
def load_banned_users():
    with open(BANNED_USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_banned_users(users):
    with open(BANNED_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False)

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö
@dp.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]))
async def ignore_group_messages(message: Message):
    return

# –ü—Ä–∏–µ–º –ø–æ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ)
@dp.message(F.chat.type == ChatType.PRIVATE, F.content_type.in_([types.ContentType.TEXT, types.ContentType.PHOTO]))
async def receive_post(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    banned_users = load_banned_users()
    if user_id in banned_users:
        await message.reply("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã.")
        return

    user_file = os.path.join(POSTS_DIR, f"{user_id}.json")
    post_data = {
        "text": message.caption if message.photo else message.text,
        "photo": message.photo[-1].file_id if message.photo else None,
        "time": datetime.now().isoformat()
    }

    with open(user_file, "w", encoding="utf-8") as f:
        json.dump(post_data, f, ensure_ascii=False)

    await message.reply("‚úÖ –í–∞—à –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞
async def post_scheduler():
    while True:
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
            for chat_id in CHANNEL_ID:
                if chat_id in chat_message_ids:
                    for message_id in chat_message_ids[chat_id]:
                        try:
                            await bot.delete_message(chat_id, message_id)
                        except TelegramBadRequest as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}: {e}")
                    chat_message_ids[chat_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

            # –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
            for filename in os.listdir(POSTS_DIR):
                file_path = os.path.join(POSTS_DIR, filename)

                with open(file_path, "r", encoding="utf-8") as f:
                    post_data = json.load(f)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã
                for chat_id in CHANNEL_ID:
                    try:
                        if post_data["photo"]:
                            sent_message = await bot.send_photo(chat_id, post_data["photo"], caption=post_data["text"])
                        else:
                            sent_message = await bot.send_message(chat_id, post_data["text"])

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if chat_id not in chat_message_ids:
                            chat_message_ids[chat_id] = []
                        chat_message_ids[chat_id].append(sent_message.message_id)

                    except TelegramBadRequest:
                        print(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.")

            await asyncio.sleep(43200)  # –ñ–¥–µ–º 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ post_scheduler: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /ban <user_id> - –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        user_id = int(message.text.split()[1])
        banned_users = load_banned_users()
        if user_id not in banned_users:
            banned_users.append(user_id)
            save_banned_users(banned_users)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–Ω–µ.")
    except:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <user_id>")

# –ö–æ–º–∞–Ω–¥–∞ /unban <user_id> - —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        user_id = int(message.text.split()[1])
        banned_users = load_banned_users()
        if user_id in banned_users:
            banned_users.remove(user_id)
            save_banned_users(banned_users)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        else:
            await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ.")
    except:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <user_id>")

# –ö–æ–º–∞–Ω–¥–∞ /all_posts - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
@dp.message(Command("all_posts"))
async def all_posts(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    posts_text = []
    for filename in os.listdir(POSTS_DIR):
        user_id = filename.replace(".json", "")
        with open(os.path.join(POSTS_DIR, filename), "r", encoding="utf-8") as f:
            post_data = json.load(f)
            posts_text.append(f"üë§ User ID: {user_id}\nüìú Post: {post_data['text']}\n")

    if posts_text:
        await message.reply("\n".join(posts_text))
    else:
        await message.reply("üîç –ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(post_scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())